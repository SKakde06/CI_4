# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RgA1P-l_KPBIWiPHMq4fWhqzxF3u2PlZ
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestClassifier, RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score, classification_report, accuracy_score
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.mixture import GaussianMixture
from sklearn.metrics import silhouette_score

# App title
st.title("Customer Analytics Dashboard")

# Sidebar navigation
st.sidebar.title("Navigation")
option = st.sidebar.selectbox("Choose Analysis:",
    ["Data Overview", "Regression", "Classification", "Clustering"])

# Upload dataset
st.sidebar.subheader("Upload Dataset")
uploaded_file = st.sidebar.file_uploader("Upload a CSV file", type=["csv"])

if uploaded_file:
    # Load dataset
    data = pd.read_csv(uploaded_file)
    st.write("### Dataset")
    st.write(data.head())

    if option == "Data Overview":
        st.write("### Data Overview")
        st.write(data.describe())
        st.write(data.info())
        st.write("#### Missing Values")
        st.write(data.isnull().sum())

        # Visualizations
        st.write("#### Pairplot")
        sns.pairplot(data)
        st.pyplot()

    elif option == "Regression":
        st.write("### Regression Analysis")

        if 'purchase_amount' in data.columns:
            # Prepare the data
            X = data.drop(columns=['user_id', 'purchase_amount', 'region'])
            y = data['purchase_amount']
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # Train and evaluate models
            models = {
                "Linear Regression": LinearRegression(),
                "Random Forest Regressor": RandomForestRegressor(random_state=42)
            }
            for name, model in models.items():
                model.fit(X_train, y_train)
                y_pred = model.predict(X_test)
                rmse = mean_squared_error(y_test, y_pred, squared=False)
                r2 = r2_score(y_test, y_pred)

                st.write(f"#### {name}")
                st.write(f"RMSE: {rmse:.2f}, R^2: {r2:.2f}")

    elif option == "Classification":
        st.write("### Classification Analysis")

        if 'region' in data.columns:
            # Prepare data
            X = data.drop(columns=['user_id', 'region'])
            y = data['region']
            le = LabelEncoder()
            y = le.fit_transform(y)
            X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

            # Train a classifier
            model = RandomForestClassifier(random_state=42)
            model.fit(X_train, y_train)
            y_pred = model.predict(X_test)

            acc = accuracy_score(y_test, y_pred)
            st.write("#### Random Forest Classifier")
            st.write(f"Accuracy: {acc:.2f}")
            st.text("Classification Report:")
            st.text(classification_report(y_test, y_pred))

    elif option == "Clustering":
        st.write("### Clustering Analysis")

        X = data.drop(columns=['user_id', 'region'])
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # KMeans clustering
        kmeans = KMeans(n_clusters=3, random_state=42)
        clusters = kmeans.fit_predict(X_scaled)
        sil_score = silhouette_score(X_scaled, clusters)

        st.write("#### KMeans Clustering")
        st.write(f"Silhouette Score: {sil_score:.2f}")

        # Visualize using PCA
        pca = PCA(n_components=2)
        X_pca = pca.fit_transform(X_scaled)
        plt.scatter(X_pca[:, 0], X_pca[:, 1], c=clusters, cmap='viridis', alpha=0.6)
        plt.colorbar()
        st.pyplot()

else:
    st.warning("Please upload a dataset to proceed.")